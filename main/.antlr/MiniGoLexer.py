# Generated from d:/WORKSPACE/PPL/code/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,65,500,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,3,21,270,8,21,
        1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,
        1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,
        1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,5,52,
        349,8,52,10,52,12,52,352,9,52,1,53,1,53,1,53,5,53,357,8,53,10,53,
        12,53,360,9,53,3,53,362,8,53,1,54,1,54,1,54,4,54,367,8,54,11,54,
        12,54,368,1,55,1,55,1,55,4,55,374,8,55,11,55,12,55,375,1,56,1,56,
        1,56,4,56,381,8,56,11,56,12,56,382,1,57,1,57,1,58,1,58,1,59,1,59,
        1,60,1,60,1,60,5,60,394,8,60,10,60,12,60,397,9,60,1,60,3,60,400,
        8,60,1,61,4,61,403,8,61,11,61,12,61,404,1,62,1,62,3,62,409,8,62,
        1,62,4,62,412,8,62,11,62,12,62,413,1,63,4,63,417,8,63,11,63,12,63,
        418,1,63,1,63,1,64,1,64,1,64,1,64,1,64,5,64,428,8,64,10,64,12,64,
        431,9,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,442,8,
        65,10,65,12,65,445,9,65,1,65,1,65,1,66,1,66,5,66,451,8,66,10,66,
        12,66,454,9,66,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,3,68,464,
        8,68,1,69,1,69,1,69,1,70,1,70,1,70,3,70,472,8,70,1,71,1,71,1,71,
        1,72,1,72,5,72,479,8,72,10,72,12,72,482,9,72,1,72,1,72,1,72,3,72,
        487,8,72,1,72,1,72,1,73,1,73,5,73,493,8,73,10,73,12,73,496,9,73,
        1,73,1,73,1,73,1,429,0,74,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
        105,53,107,54,109,55,111,56,113,57,115,0,117,0,119,0,121,58,123,
        0,125,0,127,59,129,60,131,61,133,62,135,0,137,0,139,0,141,0,143,
        63,145,64,147,65,1,0,19,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,49,57,1,0,48,57,2,0,66,66,98,98,2,0,79,79,111,111,
        2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,1,0,48,49,2,0,
        69,69,101,101,2,0,43,43,45,45,3,0,9,9,12,13,32,32,2,0,10,10,13,13,
        5,0,34,34,92,92,110,110,114,114,116,116,4,0,10,10,13,13,34,34,92,
        92,1,0,13,13,5,0,39,39,92,92,110,110,114,114,116,116,1,1,10,10,512,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,121,1,0,0,0,0,127,1,0,0,0,0,129,1,
        0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,
        147,1,0,0,0,1,149,1,0,0,0,3,151,1,0,0,0,5,154,1,0,0,0,7,159,1,0,
        0,0,9,163,1,0,0,0,11,170,1,0,0,0,13,175,1,0,0,0,15,180,1,0,0,0,17,
        187,1,0,0,0,19,197,1,0,0,0,21,204,1,0,0,0,23,208,1,0,0,0,25,214,
        1,0,0,0,27,222,1,0,0,0,29,228,1,0,0,0,31,232,1,0,0,0,33,241,1,0,
        0,0,35,247,1,0,0,0,37,253,1,0,0,0,39,257,1,0,0,0,41,262,1,0,0,0,
        43,269,1,0,0,0,45,274,1,0,0,0,47,276,1,0,0,0,49,278,1,0,0,0,51,280,
        1,0,0,0,53,282,1,0,0,0,55,284,1,0,0,0,57,287,1,0,0,0,59,290,1,0,
        0,0,61,292,1,0,0,0,63,295,1,0,0,0,65,297,1,0,0,0,67,300,1,0,0,0,
        69,303,1,0,0,0,71,306,1,0,0,0,73,308,1,0,0,0,75,311,1,0,0,0,77,314,
        1,0,0,0,79,317,1,0,0,0,81,320,1,0,0,0,83,323,1,0,0,0,85,326,1,0,
        0,0,87,328,1,0,0,0,89,330,1,0,0,0,91,332,1,0,0,0,93,334,1,0,0,0,
        95,336,1,0,0,0,97,338,1,0,0,0,99,340,1,0,0,0,101,342,1,0,0,0,103,
        344,1,0,0,0,105,346,1,0,0,0,107,361,1,0,0,0,109,363,1,0,0,0,111,
        370,1,0,0,0,113,377,1,0,0,0,115,384,1,0,0,0,117,386,1,0,0,0,119,
        388,1,0,0,0,121,390,1,0,0,0,123,402,1,0,0,0,125,406,1,0,0,0,127,
        416,1,0,0,0,129,422,1,0,0,0,131,437,1,0,0,0,133,448,1,0,0,0,135,
        458,1,0,0,0,137,463,1,0,0,0,139,465,1,0,0,0,141,471,1,0,0,0,143,
        473,1,0,0,0,145,476,1,0,0,0,147,490,1,0,0,0,149,150,5,58,0,0,150,
        2,1,0,0,0,151,152,5,105,0,0,152,153,5,102,0,0,153,4,1,0,0,0,154,
        155,5,101,0,0,155,156,5,108,0,0,156,157,5,115,0,0,157,158,5,101,
        0,0,158,6,1,0,0,0,159,160,5,102,0,0,160,161,5,111,0,0,161,162,5,
        114,0,0,162,8,1,0,0,0,163,164,5,114,0,0,164,165,5,101,0,0,165,166,
        5,116,0,0,166,167,5,117,0,0,167,168,5,114,0,0,168,169,5,110,0,0,
        169,10,1,0,0,0,170,171,5,102,0,0,171,172,5,117,0,0,172,173,5,110,
        0,0,173,174,5,99,0,0,174,12,1,0,0,0,175,176,5,116,0,0,176,177,5,
        121,0,0,177,178,5,112,0,0,178,179,5,101,0,0,179,14,1,0,0,0,180,181,
        5,115,0,0,181,182,5,116,0,0,182,183,5,114,0,0,183,184,5,117,0,0,
        184,185,5,99,0,0,185,186,5,116,0,0,186,16,1,0,0,0,187,188,5,105,
        0,0,188,189,5,110,0,0,189,190,5,116,0,0,190,191,5,101,0,0,191,192,
        5,114,0,0,192,193,5,102,0,0,193,194,5,97,0,0,194,195,5,99,0,0,195,
        196,5,101,0,0,196,18,1,0,0,0,197,198,5,115,0,0,198,199,5,116,0,0,
        199,200,5,114,0,0,200,201,5,105,0,0,201,202,5,110,0,0,202,203,5,
        103,0,0,203,20,1,0,0,0,204,205,5,105,0,0,205,206,5,110,0,0,206,207,
        5,116,0,0,207,22,1,0,0,0,208,209,5,102,0,0,209,210,5,108,0,0,210,
        211,5,111,0,0,211,212,5,97,0,0,212,213,5,116,0,0,213,24,1,0,0,0,
        214,215,5,98,0,0,215,216,5,111,0,0,216,217,5,111,0,0,217,218,5,108,
        0,0,218,219,5,101,0,0,219,220,5,97,0,0,220,221,5,110,0,0,221,26,
        1,0,0,0,222,223,5,99,0,0,223,224,5,111,0,0,224,225,5,110,0,0,225,
        226,5,115,0,0,226,227,5,116,0,0,227,28,1,0,0,0,228,229,5,118,0,0,
        229,230,5,97,0,0,230,231,5,114,0,0,231,30,1,0,0,0,232,233,5,99,0,
        0,233,234,5,111,0,0,234,235,5,110,0,0,235,236,5,116,0,0,236,237,
        5,105,0,0,237,238,5,110,0,0,238,239,5,117,0,0,239,240,5,101,0,0,
        240,32,1,0,0,0,241,242,5,98,0,0,242,243,5,114,0,0,243,244,5,101,
        0,0,244,245,5,97,0,0,245,246,5,107,0,0,246,34,1,0,0,0,247,248,5,
        114,0,0,248,249,5,97,0,0,249,250,5,110,0,0,250,251,5,103,0,0,251,
        252,5,101,0,0,252,36,1,0,0,0,253,254,5,110,0,0,254,255,5,105,0,0,
        255,256,5,108,0,0,256,38,1,0,0,0,257,258,5,116,0,0,258,259,5,114,
        0,0,259,260,5,117,0,0,260,261,5,101,0,0,261,40,1,0,0,0,262,263,5,
        102,0,0,263,264,5,97,0,0,264,265,5,108,0,0,265,266,5,115,0,0,266,
        267,5,101,0,0,267,42,1,0,0,0,268,270,5,13,0,0,269,268,1,0,0,0,269,
        270,1,0,0,0,270,271,1,0,0,0,271,272,5,10,0,0,272,273,6,21,0,0,273,
        44,1,0,0,0,274,275,5,43,0,0,275,46,1,0,0,0,276,277,5,45,0,0,277,
        48,1,0,0,0,278,279,5,42,0,0,279,50,1,0,0,0,280,281,5,47,0,0,281,
        52,1,0,0,0,282,283,5,37,0,0,283,54,1,0,0,0,284,285,5,61,0,0,285,
        286,5,61,0,0,286,56,1,0,0,0,287,288,5,33,0,0,288,289,5,61,0,0,289,
        58,1,0,0,0,290,291,5,60,0,0,291,60,1,0,0,0,292,293,5,60,0,0,293,
        294,5,61,0,0,294,62,1,0,0,0,295,296,5,62,0,0,296,64,1,0,0,0,297,
        298,5,62,0,0,298,299,5,61,0,0,299,66,1,0,0,0,300,301,5,124,0,0,301,
        302,5,124,0,0,302,68,1,0,0,0,303,304,5,38,0,0,304,305,5,38,0,0,305,
        70,1,0,0,0,306,307,5,33,0,0,307,72,1,0,0,0,308,309,5,58,0,0,309,
        310,5,61,0,0,310,74,1,0,0,0,311,312,5,43,0,0,312,313,5,61,0,0,313,
        76,1,0,0,0,314,315,5,45,0,0,315,316,5,61,0,0,316,78,1,0,0,0,317,
        318,5,42,0,0,318,319,5,61,0,0,319,80,1,0,0,0,320,321,5,47,0,0,321,
        322,5,61,0,0,322,82,1,0,0,0,323,324,5,37,0,0,324,325,5,61,0,0,325,
        84,1,0,0,0,326,327,5,61,0,0,327,86,1,0,0,0,328,329,5,46,0,0,329,
        88,1,0,0,0,330,331,5,40,0,0,331,90,1,0,0,0,332,333,5,41,0,0,333,
        92,1,0,0,0,334,335,5,91,0,0,335,94,1,0,0,0,336,337,5,93,0,0,337,
        96,1,0,0,0,338,339,5,123,0,0,339,98,1,0,0,0,340,341,5,125,0,0,341,
        100,1,0,0,0,342,343,5,44,0,0,343,102,1,0,0,0,344,345,5,59,0,0,345,
        104,1,0,0,0,346,350,7,0,0,0,347,349,7,1,0,0,348,347,1,0,0,0,349,
        352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,106,1,0,0,0,352,
        350,1,0,0,0,353,362,5,48,0,0,354,358,7,2,0,0,355,357,7,3,0,0,356,
        355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,
        362,1,0,0,0,360,358,1,0,0,0,361,353,1,0,0,0,361,354,1,0,0,0,362,
        108,1,0,0,0,363,364,5,48,0,0,364,366,7,4,0,0,365,367,3,119,59,0,
        366,365,1,0,0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,
        369,110,1,0,0,0,370,371,5,48,0,0,371,373,7,5,0,0,372,374,3,117,58,
        0,373,372,1,0,0,0,374,375,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,
        0,376,112,1,0,0,0,377,378,5,48,0,0,378,380,7,6,0,0,379,381,3,115,
        57,0,380,379,1,0,0,0,381,382,1,0,0,0,382,380,1,0,0,0,382,383,1,0,
        0,0,383,114,1,0,0,0,384,385,7,7,0,0,385,116,1,0,0,0,386,387,7,8,
        0,0,387,118,1,0,0,0,388,389,7,9,0,0,389,120,1,0,0,0,390,391,3,123,
        61,0,391,395,5,46,0,0,392,394,7,3,0,0,393,392,1,0,0,0,394,397,1,
        0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,399,1,0,0,0,397,395,1,
        0,0,0,398,400,3,125,62,0,399,398,1,0,0,0,399,400,1,0,0,0,400,122,
        1,0,0,0,401,403,7,3,0,0,402,401,1,0,0,0,403,404,1,0,0,0,404,402,
        1,0,0,0,404,405,1,0,0,0,405,124,1,0,0,0,406,408,7,10,0,0,407,409,
        7,11,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,412,
        7,3,0,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,1,0,0,0,413,414,
        1,0,0,0,414,126,1,0,0,0,415,417,7,12,0,0,416,415,1,0,0,0,417,418,
        1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,421,
        6,63,1,0,421,128,1,0,0,0,422,423,5,47,0,0,423,424,5,42,0,0,424,429,
        1,0,0,0,425,428,3,129,64,0,426,428,9,0,0,0,427,425,1,0,0,0,427,426,
        1,0,0,0,428,431,1,0,0,0,429,430,1,0,0,0,429,427,1,0,0,0,430,432,
        1,0,0,0,431,429,1,0,0,0,432,433,5,42,0,0,433,434,5,47,0,0,434,435,
        1,0,0,0,435,436,6,64,1,0,436,130,1,0,0,0,437,438,5,47,0,0,438,439,
        5,47,0,0,439,443,1,0,0,0,440,442,8,13,0,0,441,440,1,0,0,0,442,445,
        1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,443,
        1,0,0,0,446,447,6,65,1,0,447,132,1,0,0,0,448,452,5,34,0,0,449,451,
        3,137,68,0,450,449,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,453,
        1,0,0,0,453,455,1,0,0,0,454,452,1,0,0,0,455,456,5,34,0,0,456,457,
        6,66,2,0,457,134,1,0,0,0,458,459,5,92,0,0,459,460,7,14,0,0,460,136,
        1,0,0,0,461,464,8,15,0,0,462,464,3,139,69,0,463,461,1,0,0,0,463,
        462,1,0,0,0,464,138,1,0,0,0,465,466,5,92,0,0,466,467,7,14,0,0,467,
        140,1,0,0,0,468,472,7,16,0,0,469,470,5,92,0,0,470,472,8,17,0,0,471,
        468,1,0,0,0,471,469,1,0,0,0,472,142,1,0,0,0,473,474,9,0,0,0,474,
        475,6,71,3,0,475,144,1,0,0,0,476,480,5,34,0,0,477,479,3,137,68,0,
        478,477,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,
        481,486,1,0,0,0,482,480,1,0,0,0,483,484,5,13,0,0,484,487,5,10,0,
        0,485,487,7,18,0,0,486,483,1,0,0,0,486,485,1,0,0,0,487,488,1,0,0,
        0,488,489,6,72,4,0,489,146,1,0,0,0,490,494,5,34,0,0,491,493,3,137,
        68,0,492,491,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,
        0,0,495,497,1,0,0,0,496,494,1,0,0,0,497,498,3,141,70,0,498,499,6,
        73,5,0,499,148,1,0,0,0,23,0,269,350,358,361,368,375,382,395,399,
        404,408,413,418,427,429,443,452,463,471,480,486,494,6,1,21,0,6,0,
        0,1,66,1,1,71,2,1,72,3,1,73,4
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    STRING = 10
    INT = 11
    FLOAT = 12
    BOOLEAN = 13
    CONST = 14
    VAR = 15
    CONTINUE = 16
    BREAK = 17
    RANGE = 18
    NIL = 19
    TRUE = 20
    FALSE = 21
    NEWLINE = 22
    ADD = 23
    SUB = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQUAL = 28
    NOT_EQUAL = 29
    LT = 30
    LE = 31
    GT = 32
    GE = 33
    LOGICAL_OR = 34
    LOGICAL_AND = 35
    LOGICAL_NOT = 36
    SHORT_DECL = 37
    ADD_ASSIGN = 38
    SUB_ASSIGN = 39
    MUL_ASSIGN = 40
    DIV_ASSIGN = 41
    MOD_ASSIGN = 42
    ASSIGN = 43
    DOT = 44
    OP = 45
    CP = 46
    OSB = 47
    CSB = 48
    OCB = 49
    CCB = 50
    COMMA = 51
    SEMICOLON = 52
    ID = 53
    DECIMAL_LIT = 54
    BINARY_LIT = 55
    OCT_LIT = 56
    HEXA_LIT = 57
    FLOAT_LIT = 58
    WS = 59
    COMMENT = 60
    LINE_COMMENT = 61
    STRING_LIT = 62
    ERROR_CHAR = 63
    UNCLOSE_STRING = 64
    ILLEGAL_ESCAPE = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", 
            "'struct'", "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'||'", "'&&'", "'!'", 
            "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'='", "'.'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "NEWLINE", "ADD", 
            "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LT", "LE", 
            "GT", "GE", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "SHORT_DECL", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "ASSIGN", "DOT", "OP", "CP", "OSB", "CSB", "OCB", "CCB", "COMMA", 
            "SEMICOLON", "ID", "DECIMAL_LIT", "BINARY_LIT", "OCT_LIT", "HEXA_LIT", 
            "FLOAT_LIT", "WS", "COMMENT", "LINE_COMMENT", "STRING_LIT", 
            "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                  "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                  "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
                  "FALSE", "NEWLINE", "ADD", "SUB", "MUL", "DIV", "MOD", 
                  "EQUAL", "NOT_EQUAL", "LT", "LE", "GT", "GE", "LOGICAL_OR", 
                  "LOGICAL_AND", "LOGICAL_NOT", "SHORT_DECL", "ADD_ASSIGN", 
                  "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                  "ASSIGN", "DOT", "OP", "CP", "OSB", "CSB", "OCB", "CCB", 
                  "COMMA", "SEMICOLON", "ID", "DECIMAL_LIT", "BINARY_LIT", 
                  "OCT_LIT", "HEXA_LIT", "HEX_DIGIT", "OCTAL_DIGIT", "BIN_DIGIT", 
                  "FLOAT_LIT", "DECIMALS", "EXPONENT", "WS", "COMMENT", 
                  "LINE_COMMENT", "STRING_LIT", "ESCAPED_VALUE", "STR_CHAR", 
                  "ESC_SEQ", "ESC_ILLEGAL", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self.preType = None

    def emit(self):
        tk = self.type
        self.preType = tk;
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[21] = self.NEWLINE_action 
            actions[66] = self.STRING_LIT_action 
            actions[71] = self.ERROR_CHAR_action 
            actions[72] = self.UNCLOSE_STRING_action 
            actions[73] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                if self.preType in {
                    self.CP, self.CCB, self.CSB, 
                    self.DECIMAL_LIT, self.BINARY_LIT,
                    self.OCT_LIT, self.HEXA_LIT, 
                    self.FLOAT_LIT, self.STRING_LIT, self.TRUE, 
                    self.FALSE, self.ID, self.BREAK, 
                    self.CONTINUE, self.RETURN, self.NIL
                }:
                    self.text = ';'
                else:
                    self.skip()

     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             self.text = self.text[1:-1] 
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[:-1])
                else:
                    raise UncloseString(self.text)

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                raise IllegalEscape(self.text)

     


